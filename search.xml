<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JAVA8 - Lambda表达式的简单应用</title>
      <link href="/2019/04/14/JAVA8-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/"/>
      <url>/2019/04/14/JAVA8-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>前言:</strong> JAVA8带来了很多有趣和高效的新东西,其中Lambda表达式和函数式编程应该是其中最靓的点了.今天我们来简单认识下 JAVA8-Lambda</p><p><strong>首先</strong>,我们来看点小知识,平常我们在写了业务流程后,总不可避免的要构造一些测试数据来验证我们的代码.那么,大家在平时工作中学用的构造数据的方式都有什么呢,这里我来给大家推荐几种快速构造测试数据的小Demo.</p><hr><pre><code>public class JavaTest {/** 测试时,经常需要快速初始化一个集合来测试程序. */// 初始化一个不可变List&lt;Integer&gt;static List&lt;Integer&gt; integers = Arrays.asList(1, 2, 3, 4, 5, 5);// 初始化一个可变List&lt;Integer&gt;static List&lt;Integer&gt; edIntegers = new ArrayList&lt;&gt;(integers);// 初始化一个可变Set&lt;Integer&gt;static Set&lt;Integer&gt; setIntegers = new HashSet&lt;&gt;(integers);// 另类的快速初始化List&lt;String&gt;static List&lt;String&gt; strings = new ArrayList&lt;String&gt;() {    private static final long serialVersionUID = 1L;    {        add(&quot;abc&quot;);        add(&quot;bca&quot;);        add(&quot;acb&quot;);    }};// 另类快速初始化一个Map&lt;String,Integer&gt;static Map&lt;String, Integer&gt; ages = new HashMap&lt;String, Integer&gt;() {    private static final long serialVersionUID = 1L;    {        put(&quot;HP&quot;, 12);        put(&quot;ASUS&quot;, 15);        put(&quot;HuaWei&quot;, 22);    }};// 另类快速初始化一个List&lt;Map&lt;String,Integer&gt;&gt;static List&lt;Map&lt;String, Integer&gt;&gt; strAges = new ArrayList&lt;Map&lt;String, Integer&gt;&gt;() {    {        add(new HashMap&lt;String, Integer&gt;(){            {                put(&quot;HP&quot;, 12);                put(&quot;ASUS&quot;, 15);                put(&quot;HuaWei&quot;, 22);            }        });        add(new HashMap&lt;String, Integer&gt;() {            {                put(&quot;HP&quot;, 22);                put(&quot;ASUS&quot;, 35);                put(&quot;HuaWei&quot;, 42);            }        });        add(new HashMap&lt;String, Integer&gt;() {            {                put(&quot;HP&quot;, 11);                put(&quot;ASUS&quot;, 25);                put(&quot;HuaWei&quot;, 32);            }        });    }};</code></pre><hr><h3 id="接下来我们来用-Lambda-表达式来操作这些数据"><a href="#接下来我们来用-Lambda-表达式来操作这些数据" class="headerlink" title="接下来我们来用 Lambda 表达式来操作这些数据."></a>接下来我们来用 Lambda 表达式来操作这些数据.</h3><h4 id="1-我们在测试中对数据常用的就是遍历-我们在测试类中添加如下方法"><a href="#1-我们在测试中对数据常用的就是遍历-我们在测试类中添加如下方法" class="headerlink" title="1.我们在测试中对数据常用的就是遍历,我们在测试类中添加如下方法:"></a>1.我们在测试中对数据常用的就是遍历,我们在测试类中添加如下方法:</h4><pre><code>/** 资源遍历 */private static void each() {    // 遍历List测试.    integers.forEach(System.out::print);// =&gt;1 2 3 4 5 5    System.out.println();    edIntegers.forEach(System.out::print);// =&gt;1 2 3 4 5 5    System.out.println();    setIntegers.forEach(System.out::print);// =&gt;1 2 3 4 5    System.out.println();    strings.forEach(System.out::print);// =&gt;abc bca acb    System.out.println();    // 遍历Map测试    ages.forEach((key, value) -&gt; {        System.out.print(&quot;{&quot; + key + &quot;:&quot;);        System.out.println(value + &quot;}&quot;);    });// =&gt;{HP:12} {HuaWei:22} {ASUS:15}}</code></pre><p>在main方法中调用此 each() 方法即可看到上述执行结果.</p><h4 id="2-java8-中流的-sorted-排序让数据集的排序变得更简单明了-同样我们创建如下方法并在-main方法中调用"><a href="#2-java8-中流的-sorted-排序让数据集的排序变得更简单明了-同样我们创建如下方法并在-main方法中调用" class="headerlink" title="2.java8 中流的 sorted 排序让数据集的排序变得更简单明了,同样我们创建如下方法并在 main方法中调用 ."></a>2.java8 中流的 sorted 排序让数据集的排序变得更简单明了,同样我们创建如下方法并在 main方法中调用 .</h4><pre><code>/** 资源排序 */private static void sorted() {    // List 排序 Comparator.reverseOrder() 是将顺序颠倒.    integers.stream().sorted(Comparator.reverseOrder()).forEach(System.out::print);// =&gt;5 5 4 3 2 1    System.out.println();    strings.stream().sorted().forEach(System.out::print);// =&gt;abc acb bca    System.out.println();    strings.stream().sorted(Comparator.reverseOrder()).forEach(System.out::print);// =&gt;bca acb abc    System.out.println();    // List&lt;Map&gt; 根据某字段排序    strAges.stream().sorted((a, b) -&gt; {        return a.get(&quot;HP&quot;).compareTo(b.get(&quot;HP&quot;));    }).forEach(x -&gt; {        System.out.print(x);    });// =&gt;{HP=11, HuaWei=32, ASUS=25} {HP=12, HuaWei=22, ASUS=15} {HP=22, HuaWei=42, ASUS=35}}</code></pre><h4 id="3-java8中stream的-filter提供了一种简单的过滤数据集得到我们想要的结果集的方法"><a href="#3-java8中stream的-filter提供了一种简单的过滤数据集得到我们想要的结果集的方法" class="headerlink" title="3. java8中stream的 filter提供了一种简单的过滤数据集得到我们想要的结果集的方法."></a>3. java8中stream的 filter提供了一种简单的过滤数据集得到我们想要的结果集的方法.</h4><pre><code>/** 资源过滤 */private static void filter() {    // List 过滤    integers.stream().filter(x -&gt; x.compareTo(2) &gt; -1).forEach(System.out::print);// =&gt; 2 3 4 5 5    System.out.println();    strings.stream().filter(x -&gt; x.indexOf(&quot;a&quot;) &lt; 2).forEach(System.out::print);// =&gt;abc acb    System.out.println();    // List&lt;Map&gt; 根据某字段过滤    strAges.stream().filter(x -&gt; x.get(&quot;ASUS&quot;).compareTo(20) &gt; 0).forEach(System.out::print);    // =&gt;{HP=22, HuaWei=42, ASUS=35} {HP=11, HuaWei=32, ASUS=25}}</code></pre><h4 id="4-有时候我们需要将集合中的数据进行一定方式处理后返回-以满足我们的应用场景-java8-stream的map可以满足你的需求"><a href="#4-有时候我们需要将集合中的数据进行一定方式处理后返回-以满足我们的应用场景-java8-stream的map可以满足你的需求" class="headerlink" title="4. 有时候我们需要将集合中的数据进行一定方式处理后返回,以满足我们的应用场景.java8 stream的map可以满足你的需求."></a>4. 有时候我们需要将集合中的数据进行一定方式处理后返回,以满足我们的应用场景.java8 stream的map可以满足你的需求.</h4><pre><code>/** 资源转换 */private static void transfer() {    // 取List&lt;Map&gt;中一个字段组成新的List    List&lt;Integer&gt; ASUS_Ages = strAges.stream().map(x -&gt; x.get(&quot;ASUS&quot;)).collect(Collectors.toList());    ASUS_Ages.forEach(System.out::print);// =&gt;15 35 25    System.out.println();    // 将List&lt;Integer&gt; 中元素求和    Integer ages = ASUS_Ages.stream().reduce(0, (a, b) -&gt; a + b);    System.out.println(ages);// =&gt; 75}</code></pre><h3 id="大家看得过瘾不-希望每天都有进步哦"><a href="#大家看得过瘾不-希望每天都有进步哦" class="headerlink" title="大家看得过瘾不? 希望每天都有进步哦!"></a>大家看得过瘾不? 希望每天都有进步哦!</h3><h4 id="最后附上-main中代码"><a href="#最后附上-main中代码" class="headerlink" title="最后附上 main中代码."></a>最后附上 main中代码.</h4><pre><code>public static void main(String[] args) {     each();     sorted();     filter();    transfer();}</code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> JAVA8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/04/11/hello-world/"/>
      <url>/2019/04/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
